@page "/admin/incidents/{Page:int}"
@page "/admin"
@inherits OwningComponentBase<ICrashRepository>;
@using IntexFinal.Models.ViewModels;
@using Microsoft.JSInterop;
@inject IJSRuntime JS; 


<div class="container">
    <h1 class="text-center">Admin</h1>
    <NavLink class="btn btn-primary mb-3" href="/admin/incidents/create">Enter New Data</NavLink>
    <table class="table table-sm table-striped table-bordered">
        <thead>
            <tr>
                <th>Crash Id</th>
                <th>Crash Datetime</th>
                <th>City</th>
                <th>Mainroad Name</th>
            </tr>
        </thead>
        <tbody>
            @if (IncidentData?.Count() > 0)
            {
                //List the Data
                @foreach (crash_data c in IncidentData)
                {
                    <tr>
                        <td>@c.crash_ID</td>
                        <td>@c.crash_datetime</td>
                        <td>@c.city</td>
                        <td>@c.main_road_name</td>
                        <td>
                            <NavLink class="btn btn-info btn-sm" href="@GetDetailsUrl(c.crash_ID)">Details</NavLink>
                        </td>
                        <td>
                            <NavLink class="btn btn-warning btn-sm" href="@GetEditUrl(c.crash_ID)">Edit</NavLink>
                        </td>
                        <td>
                            <NavLink class="btn btn-danger text-white btn-sm" @onclick="() => RemoveCrashData(c)">Delete</NavLink>
                        </td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="5" class="text-center">No Incidents to Show</td>
                </tr>
            }
        </tbody>
    </table>
    <Paging PI="pagingInfo" PageClassesEnabled="true" PageClass="Paging" PageClassSelected="active"></Paging>
</div>

@code {
        [Parameter]
        public int page { get; set; }

        PagingInfo pagingInfo = new PagingInfo();

    public ICrashRepository repo => Service;

    public IEnumerable<crash_data> IncidentData { get; set; }

    //protected async override Task OnInitializedAsync()
    //{
    //    await UpdateData();
    //}

    //public async Task UpdateData()
    //{
    //    IncidentData = await repo.Crash_Data.ToListAsync();

    //}

    protected override void OnParametersSet()
    {
        CreatePagingInfo();
    }

    public string GetDetailsUrl(long id) => $"/admin/incidents/details/{id}";
    public string GetEditUrl(long id) => $"/admin/incidents/edit/{id}";

    public async Task RemoveCrashData(crash_data c)
    {
        if (!await JS.InvokeAsync<bool>("confirm", $"Are you sure you want to delete this incident?"))
        {
            return;
        }

        repo.DeleteCrashData(c);
        CreatePagingInfo();
    }
    public void CreatePagingInfo()
    {
        var AllData = repo.Crash_Data;

        int PageSize = 10;
        pagingInfo = new PagingInfo();
        page = page == 0 ? 1 : page;
        pagingInfo.CurrentPage = page;
        pagingInfo.TotalItems = AllData.Count();
        pagingInfo.ItemsPerPage = PageSize;

        var skip = PageSize * (Convert.ToInt32(page) - 1);
        IncidentData = AllData.Skip(skip).Take(PageSize).ToList();
    }
}
